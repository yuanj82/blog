<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on YuanJ 's Blog</title><link>https://yuanj.top/tags/python/</link><description>Recent content in Python on YuanJ 's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Mon, 02 Oct 2023 09:55:32 +0800</lastBuildDate><atom:link href="https://yuanj.top/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>用 Python 实现水稻 ID 转换程序</title><link>https://yuanj.top/posts/asdifhu9a8d/</link><pubDate>Mon, 02 Oct 2023 09:55:32 +0800</pubDate><guid>https://yuanj.top/posts/asdifhu9a8d/</guid><description>用法 GitHub 仓库：ID-Converter
点击 链接 下载压缩包后运行main.exe根据提示操作即可
实现 主体程序是在一个 while 循环中，定义了两个函数ID_converter与extract_id
def ID_converter(ID): with open(&amp;#34;./ID.txt&amp;#34;, &amp;#34;r+&amp;#34;) as file: ID_corresponding_list = file.readlines() for ID in ID_corresponding_list: if gene in ID: print(&amp;#39;RAP ID:{}&amp;#39;.format(ID.split(&amp;#39;\t&amp;#39;)[0])) print(&amp;#39;MSU ID:{}&amp;#39;.format(ID.split(&amp;#39;\t&amp;#39;)[1])) global OS_ID OS_ID = ID.split(&amp;#39;\t&amp;#39;)[0] break else: continue else: print(&amp;#34;sorry, ID not found!&amp;#34;) ID_converter函数从 ID.txt 中读取 ID 对应关系，这个文件是从 RAP-DB 上下载的，RAP-DB 也是我们最常用的水稻 ID 转换工具，对应关系如下面的格式：
Os01g0100100 LOC_Os01g01010.1,LOC_Os01g01010.2 Os01g0100200 LOC_Os01g01019.1 Os01g0100300 None 逐行读取 ID 的对应关系之后，for 循环内嵌 if 判断在每一行 ID 中搜索包含输入的 ID，找到对应的行之后根据制表符（\t）进行分割，前面的是 RAP ID，后面的是 MSU ID，分开进行输出，最后再将 RAP ID 定义为全局变量以便于下一个函数调用。</description></item><item><title>Python 计算等效 A 声级</title><link>https://yuanj.top/posts/ar90trgsjkl/</link><pubDate>Wed, 13 Sep 2023 21:24:56 +0800</pubDate><guid>https://yuanj.top/posts/ar90trgsjkl/</guid><description>利用 Python 计算国家环境噪声监测技术规范中的等效声级
import math with open(&amp;#34;./data.txt&amp;#34;) as noise_data: lines = noise_data.readlines() number_string = &amp;#39;\t&amp;#39;.join(lines) number = number_string .split(&amp;#39;\t&amp;#39;) number = [x.strip() for x in number if x.strip()!=&amp;#39;&amp;#39;] number.pop(0) number.pop(200) # number.pop(400) def L_number(order): for i in number[:order]: l = 0 l = l + (1/order)*pow(order, (0.1)*float(i)) L_10 = 10*math.log(10,l) for i in number[:order+40]: l = 0 l = l + (1/(order + 40))*pow(order, (0.1)*float(i)) L_50 = 10*math.log(10,l) for i in number[:order+80]: l = 0 l = l + (1/(order + 80))*pow(order, (0.</description></item><item><title>Python生成随机数例子</title><link>https://yuanj.top/posts/ad90adf/</link><pubDate>Tue, 12 Sep 2023 12:35:51 +0800</pubDate><guid>https://yuanj.top/posts/ad90adf/</guid><description>import random import os def noise(location, number): result = &amp;#34;&amp;#34; if location == &amp;#39;library&amp;#39;: result += &amp;#34;图书馆噪声数据：&amp;#34; result += &amp;#39;\n\n&amp;#39; if location == &amp;#39;lab&amp;#39;: result += &amp;#34;实验楼噪声数据：&amp;#34; result += &amp;#39;\n\n&amp;#39; if location == &amp;#39;dormitory&amp;#39;: result += &amp;#34;寝室噪声数据：&amp;#34; result += &amp;#39;\n\n&amp;#39; for i in range(10): for i in range(10): noise_figure = number + random.uniform(0,6) result += str(&amp;#34;{:.5}&amp;#34;.format(noise_figure),) + &amp;#39;\t&amp;#39; result += &amp;#39;\n&amp;#39; result += &amp;#39;\n&amp;#39; with open(&amp;#34;./data.txt&amp;#34;, &amp;#34;a&amp;#34;) as data: data = data.</description></item><item><title>正则表达式</title><link>https://yuanj.top/posts/psdafh23h/</link><pubDate>Tue, 05 Sep 2023 20:45:30 +0800</pubDate><guid>https://yuanj.top/posts/psdafh23h/</guid><description>Python 调用正则表达式 Python 中使用正则表达式需要先导入 re 模块并且定义正则表达式然后再进行通过 re 模块的函数调用
&amp;gt;&amp;gt;&amp;gt; import re &amp;gt;&amp;gt;&amp;gt; p = r&amp;#39;\w+@gmail\.com&amp;#39; &amp;gt;&amp;gt;&amp;gt; email = &amp;#39;hieroglyphs@gmail.com&amp;#39; &amp;gt;&amp;gt;&amp;gt; m = re.match(p, email) &amp;gt;&amp;gt;&amp;gt; print(m) &amp;lt;re.Match object; span=(0, 21), match=&amp;#39;hieroglyphs@gmail.com&amp;#39;&amp;gt; 返回非空的 Match 对象则说明匹配成功，返回 None 则匹配失败
Python 中 re 模块常用的函数（p 为正则表达式，string 为字符串）：
search(p, string) 查找字符串，返回非空的 Match 对象则说明匹配成功，返回 None 则匹配失败 findall(p, string) 查找字符串，如果找到会返回所有匹配到的字符串列表，如果找不到则返回 None sub(p, repl, string, count=0) 字符串替换，repl 是用于替换的新字符串，string 是要被替换的字符串，count 是要替换的最大数量，默认为 0，表示不限制数量 split(p, string, maxsplit=0) 字符串分割，maxsplit 表示最大分割次数，默认为 0，表示不限制次数 正则表达式语法 限定符</description></item><item><title>一些 Python 基础知识</title><link>https://yuanj.top/posts/pyd23ds/</link><pubDate>Thu, 31 Aug 2023 21:29:55 +0800</pubDate><guid>https://yuanj.top/posts/pyd23ds/</guid><description>标识符 标识符的命名规则：
区分大小写 首字符可以是下划线和字母，但不能是数字 除首字符外的其他字符必须是下划线、字母和数字 关键字不能作为标识符 不要使用 Python 的内置函数作为标识符 关键字 False、def、if、raise、None、del、import、return、True、elif、in、try、and、else、is、lambda、with、as、except、while、assert、finally、nonlocal、yield、break、for、not、class、from、or、continue、global、pass
位运算符 运算符 名称 例子 ~ 位反 ~x &amp;amp; 位与 x&amp;amp;y | 位或 x|y ^ 位异或 x^y &amp;raquo; 右移 x &amp;laquo; a x 右移 a 位，高位用符号补位 &amp;laquo; 左移 x &amp;laquo; a x 左移 a 位，低位用 0 补位 运算符优先级：算术运算符&amp;gt;位运算符&amp;gt;关系运算符&amp;gt;逻辑运算符&amp;gt;赋值运算符
容器类型数据 字符串 切片 [start: end :step]
切片包括 start 位置的元素但不包括 end 位置的元素 start 和 end 可以省略 切片从零开始 str.split(sep=None, maxsplit=1)
使用 sep 子字符串切割 str 字符串 maxsplit 是最大分割次数，如被省略则表明不限分割次数 查找字符串</description></item></channel></rss>