<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gitlab on UncleCAT4</title><link>https://yuanj.top/tags/gitlab/</link><description>Recent content in Gitlab on UncleCAT4</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 25 Jun 2023 16:21:54 +0000</lastBuildDate><atom:link href="https://yuanj.top/tags/gitlab/index.xml" rel="self" type="application/rss+xml"/><item><title>自托管 Gitlab and 极狐 Gitlab 自动化 CI/CD 实践</title><link>https://yuanj.top/posts/56d5b593/</link><pubDate>Sun, 25 Jun 2023 16:21:54 +0000</pubDate><guid>https://yuanj.top/posts/56d5b593/</guid><description>最近将代码全部迁到极狐的 Gitlab 了，极狐与原生的 Gitlab 几乎一模一样，不过对国内开发者的支持更好，Cli/CD 也不需要验证信用卡可以直接使用 Vercel 默认可以直接导入的仓库只有 GitHub、原生 Gitlab、Bitbucket 和 Azure，本来我是通过镜像仓库把仓库同步发到 GitHub 再用 Vercle 部署的，今天看到 Vercel 的文档说可以使用 Cli/CD 将自托管的项目部署到 Vercel，尝试了一下
自动部署博客到 Vercel Link to heading 先到 Vercel 的 token 设置 中创建一个 token，加在 Gitlab 仓库 Cli/CD 的环境变量里面，变量名为VERCEL_TOKEN
然后在本地仓库创建.gitlab-ci.yml配置文件
内容如下
default: image: node:16.16.0 deploy_preview: stage: deploy except: - main script: - npm install --global vercel - vercel pull --yes --environment=preview --token=$VERCEL_TOKEN - vercel build --token=$VERCEL_TOKEN - vercel deploy --prebuilt --token=$VERCEL_TOKEN deploy_production: stage: deploy only: - main script: - npm install --global vercel - vercel pull --yes --environment=production --token=$VERCEL_TOKEN - vercel build --prod --token=$VERCEL_TOKEN - vercel deploy --prebuilt --prod --token=$VERCEL_TOKEN 直接 push 到远程仓库，项目名称会由 Vercel 自动创建，默认与仓库名是一致的</description></item></channel></rss>